model ClassRoomAttendance {
    id                    String               @id @default(uuid())
    attendanceTitle       String
    studentAttendanceList StudentAttendance[]
    SchoolProfile         SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId       String?
    createdAt             DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?            @updatedAt
    deletedAt             DateTime?            @db.Timestamp(0)
    department            ClassRoomDepartment? @relation(fields: [departmentId], references: [id])
    departmentId          String?
    staffProfile          StaffProfile?        @relation(fields: [staffProfileId], references: [id])
    staffProfileId        String?
}

model StudentAttendance {
    id                    String               @id @default(uuid())
    isPresent             Boolean?             @default(false)
    comment               String?
    StudentTermForm       StudentTermForm?     @relation(fields: [studentTermFormId], references: [id])
    SchoolProfile         SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId       String?
    studentTermFormId     String?
    createdAt             DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?            @updatedAt
    deletedAt             DateTime?            @db.Timestamp(0)
    classroomAttendance   ClassRoomAttendance? @relation(fields: [classroomAttendanceId], references: [id])
    classroomAttendanceId String?
    department            ClassRoomDepartment? @relation(fields: [departmentId], references: [id])
    departmentId          String?
}

model Billable {
    id              String         @id @default(uuid())
    title           String
    description     String?
    createdAt       DateTime?      @default(now()) @db.Timestamp(0)
    updatedAt       DateTime?      @updatedAt
    deletedAt       DateTime?      @db.Timestamp(0)
    schoolProfile   SchoolProfile? @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String?

    priceHistories BillablePriceHistory[]

    @@unique([title, schoolProfileId])
}

model BillablePriceHistory {
    id                  String                   @id @default(uuid())
    amount              Float
    createdAt           DateTime?                @default(now()) @db.Timestamp(0)
    updatedAt           DateTime?                @updatedAt
    deletedAt           DateTime?                @db.Timestamp(0)
    billable            Billable?                @relation(fields: [billableId], references: [id])
    billableId          String?
    studentBillables    StudentBillable[]
    departmentBillables DepartmentTermBillable[]
}

model DepartmentTermBillable {
    id                   String                @id @default(uuid())
    createdAt            DateTime?             @default(now()) @db.Timestamp(0)
    updatedAt            DateTime?             @updatedAt
    deletedAt            DateTime?             @db.Timestamp(0)
    billablePrice        BillablePriceHistory? @relation(fields: [billablesPriceId], references: [id])
    billablesPriceId     String?
    classRoomDepartments ClassRoomDepartment[]
    sessionTerm          SessionTerm?          @relation(fields: [sessionTermId], references: [id])
    sessionTermId        String?
    schoolSession        SchoolSession?        @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId      String?
}

model StudentBillable {
    id                String                      @id @default(uuid())
    createdAt         DateTime?                   @default(now()) @db.Timestamp(0)
    updatedAt         DateTime?                   @updatedAt
    deletedAt         DateTime?                   @db.Timestamp(0)
    billable          BillablePriceHistory?       @relation(fields: [billablePriceId], references: [id])
    description       String?
    billAmount        Float
    pendingAmount     Float
    billablePriceId   String?
    schoolProfile     SchoolProfile?              @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId   String?
    studentTermForm   StudentTermForm?            @relation(fields: [studentTermFormId], references: [id])
    studentTermFormId String?
    schoolSession     SchoolSession?              @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId   String?
    receipts          StudentBillPaymentReceipt[]
}

model StudentBillPaymentReceipt {
    id                    String           @id @default(uuid())
    amount                Float?
    studentBillable       StudentBillable? @relation(fields: [studentBillPaymentsId], references: [id])
    studentBillPaymentsId String?
    createdAt             DateTime?        @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?        @updatedAt
    deletedAt             DateTime?        @db.Timestamp(0)
    StudentTermForm       StudentTermForm? @relation(fields: [studentTermFormId], references: [id])
    studentTermFormId     String?
    SchoolProfile         SchoolProfile?   @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId       String?
}
