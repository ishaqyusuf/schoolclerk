// Auto-generated by flatten-schema.ts

// ---- schema.prisma (entrypoint) ----
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  relationMode    = "prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("DIRECT_URL")
}

model account {
  userId            String  @db.Uuid
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.VarChar(255)
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String?
  session_state     String? @db.VarChar(255)
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

model guardian {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id  String    @db.Uuid
  name       String    @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  updatedAt  DateTime? @db.Timestamptz(6)
  school     school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "guardian_school_id_school_id_fk")
  student    student[]
}

model school {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @db.VarChar(256)
  sub_domain           String                 @unique(map: "school_sub_domain_unique") @db.VarChar(256)
  meta                 Json?
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  deleted_at           DateTime?              @db.Timestamp(6)
  updatedAt            DateTime?              @db.Timestamptz(6)
  Subjects             Subjects[]
  academic_class       academic_class[]
  academic_session     academic_session[]
  academic_term        academic_term[]
  assessments          assessments[]
  batch_staff_service  batch_staff_service[]
  billable_service     billable_service[]
  class_subject        class_subject[]
  guardian             guardian[]
  inventory            inventory[]
  inventory_sales      inventory_sales[]
  school_wallet        school_wallet[]
  session_class        session_class[]
  staff_session_form   staff_session_form[]
  staff_term_sheet     staff_term_sheet[]
  student              student[]
  student_session_form student_session_form[]
  transaction          transaction[]
  user                 user[]

  @@unique([name, sub_domain], map: "school_name_sub_domain_unique")
}

model session {
  sessionToken String   @id @db.VarChar(255)
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

model session_class {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id              String                   @db.Uuid
  academic_session_id    String                   @db.Uuid
  academic_class_id      String                   @db.Uuid
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  deleted_at             DateTime?                @db.Timestamp(6)
  updatedAt              DateTime?                @db.Timestamptz(6)
  class_subject          class_subject[]
  academic_class         academic_class           @relation(fields: [academic_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_class_academic_class_id_academic_class_id_fk")
  academic_session       academic_session         @relation(fields: [academic_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_class_academic_session_id_academic_session_id_fk")
  school                 school                   @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_class_school_id_school_id_fk")
  staff_class_role       staff_class_role[]
  student_day_attendance student_day_attendance[]
  student_term_sheet     student_term_sheet[]
}

model user {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                  String?                  @db.VarChar(255)
  name                   String?                  @db.VarChar(255)
  email                  String                   @db.VarChar(255)
  username               String?                  @db.VarChar(255)
  phone_no               String?                  @db.VarChar(255)
  role                   String?                  @db.VarChar(255)
  school_id              String                   @db.Uuid
  emailVerified          DateTime?                @db.Timestamptz(6)
  image                  String?                  @db.VarChar(255)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  deleted_at             DateTime?                @db.Timestamp(6)
  updatedAt              DateTime?                @db.Timestamptz(6)
  account                account[]
  assessments            assessments[]
  session                session[]
  staff_class_role       staff_class_role[]
  staff_service          staff_service[]
  staff_session_form     staff_session_form[]
  staff_term_sheet       staff_term_sheet[]
  student_attendance     student_attendance[]
  student_day_attendance student_day_attendance[]
  school                 school                   @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_school_id_school_id_fk")

  @@unique([email, school_id], map: "user_email_school_id_unique")
}

// ---- .bin/school-sessions.prisma ----
model academic_class {
    id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String          @db.VarChar(256)
    school_id     String          @db.Uuid
    classLevel    Int             @default(1)
    created_at    DateTime        @default(now()) @db.Timestamp(6)
    deleted_at    DateTime?       @db.Timestamp(6)
    updatedAt     DateTime?       @db.Timestamptz(6)
    school        school          @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_class_school_id_school_id_fk")
    class_subject class_subject[]
    session_class session_class[]

    @@unique([name, school_id], map: "academic_class_name_school_id_unique")
}

model academic_session {
    id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                 String                 @db.VarChar(256)
    start_date           DateTime?              @db.Timestamp(6)
    end_date             DateTime?              @db.Timestamp(6)
    school_id            String                 @db.Uuid
    created_at           DateTime               @default(now()) @db.Timestamp(6)
    deleted_at           DateTime?              @db.Timestamp(6)
    updatedAt            DateTime?              @db.Timestamptz(6)
    school               school                 @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_session_school_id_school_id_fk")
    academic_term        academic_term[]
    batch_staff_service  batch_staff_service[]
    class_subject        class_subject[]
    session_class        session_class[]
    staff_session_form   staff_session_form[]
    student_session_form student_session_form[]

    @@unique([name, school_id], map: "academic_session_name_school_id_unique")
}

model academic_term {
    id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                   String                   @db.VarChar(256)
    school_id              String                   @db.Uuid
    academic_session_id    String                   @db.Uuid
    start_date             DateTime?                @db.Timestamp(6)
    end_date               DateTime?                @db.Timestamp(6)
    created_at             DateTime                 @default(now()) @db.Timestamp(6)
    deleted_at             DateTime?                @db.Timestamp(6)
    updatedAt              DateTime?                @db.Timestamptz(6)
    academic_session       academic_session         @relation(fields: [academic_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_term_academic_session_id_academic_session_id_fk")
    school                 school                   @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_term_school_id_school_id_fk")
    assessments            assessments[]
    batch_staff_service    batch_staff_service[]
    student_day_attendance student_day_attendance[]
    student_term_sheet     student_term_sheet[]
    transaction            transaction[]

    @@unique([name, school_id, academic_session_id], map: "academic_term_name_school_id_academic_session_id_unique")
}

// ---- .bin/inventory.prisma ----
model inventory {
    id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id       String            @db.Uuid
    title           String?           @db.VarChar
    type            String?           @db.VarChar
    amount          Decimal           @db.Decimal
    created_at      DateTime          @default(now()) @db.Timestamp(6)
    deleted_at      DateTime?         @db.Timestamp(6)
    updatedAt       DateTime?         @db.Timestamptz(6)
    school          school            @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_school_id_school_id_fk")
    inventory_sales inventory_sales[]
}

model inventory_sales {
    id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id      String      @db.Uuid
    title          String?     @db.VarChar
    book_id        String      @db.Uuid
    transaction_id String      @db.Uuid
    created_at     DateTime    @default(now()) @db.Timestamp(6)
    deleted_at     DateTime?   @db.Timestamp(6)
    updatedAt      DateTime?   @db.Timestamptz(6)
    inventory      inventory   @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_sales_book_id_inventory_id_fk")
    school         school      @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_sales_school_id_school_id_fk")
    transaction    transaction @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_sales_transaction_id_transaction_id_fk")
}

// ---- .bin/student.prisma ----
model student {
    id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id            String                 @db.Uuid
    first_name           String                 @db.VarChar(256)
    other_name           String?                @db.VarChar(256)
    surname              String                 @db.VarChar(256)
    guardianId           String?                @db.Uuid
    created_at           DateTime               @default(now()) @db.Timestamp(6)
    deleted_at           DateTime?              @db.Timestamp(6)
    updatedAt            DateTime?              @db.Timestamptz(6)
    gender               String?                @db.VarChar
    dob                  DateTime?              @db.Timestamp(6)
    guardian             guardian?              @relation(fields: [guardianId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_guardianId_guardian_id_fk")
    school               school                 @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_school_id_school_id_fk")
    student_session_form student_session_form[]
    student_term_sheet   student_term_sheet[]

    @@unique([school_id, first_name, other_name, surname], map: "student_school_id_first_name_other_name_surname_unique")
}

model student_attendance {
    id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    attendance_id          String                 @db.Uuid
    present                Boolean?               @default(false)
    comment                String?
    teacher_id             String                 @db.Uuid
    student_term_sheet_id  String                 @db.Uuid
    created_at             DateTime               @default(now()) @db.Timestamp(6)
    deleted_at             DateTime?              @db.Timestamp(6)
    updatedAt              DateTime?              @db.Timestamptz(6)
    student_day_attendance student_day_attendance @relation(fields: [attendance_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_attendance_attendance_id_student_day_attendance_id_fk")
    student_term_sheet     student_term_sheet     @relation(fields: [student_term_sheet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_attendance_student_term_sheet_id_student_term_sheet_id_")
    user                   user                   @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_attendance_teacher_id_user_id_fk")
}

model student_day_attendance {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    session_class_id   String               @db.Uuid
    teacher_id         String               @db.Uuid
    class_subject_id   String               @db.Uuid
    term_id            String               @db.Uuid
    created_at         DateTime             @default(now()) @db.Timestamp(6)
    deleted_at         DateTime?            @db.Timestamp(6)
    updatedAt          DateTime?            @db.Timestamptz(6)
    student_attendance student_attendance[]
    class_subject      class_subject        @relation(fields: [class_subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_day_attendance_class_subject_id_class_subject_id_fk")
    session_class      session_class        @relation(fields: [session_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_day_attendance_session_class_id_session_class_id_fk")
    user               user                 @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_day_attendance_teacher_id_user_id_fk")
    academic_term      academic_term        @relation(fields: [term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_day_attendance_term_id_academic_term_id_fk")
}

model student_session_form {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id          String               @db.Uuid
    student_id         String               @db.Uuid
    session_id         String               @db.Uuid
    created_at         DateTime             @default(now()) @db.Timestamp(6)
    deleted_at         DateTime?            @db.Timestamp(6)
    updatedAt          DateTime?            @db.Timestamptz(6)
    school             school               @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_session_form_school_id_school_id_fk")
    academic_session   academic_session     @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_session_form_session_id_academic_session_id_fk")
    student            student              @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_session_form_student_id_student_id_fk")
    student_term_sheet student_term_sheet[]

    @@unique([school_id, student_id], map: "student_session_form_school_id_student_id_unique")
}

model student_term_sheet {
    id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    session_sheet_id     String               @db.Uuid
    academic_term_id     String               @db.Uuid
    student_id           String               @db.Uuid
    session_class_id     String               @db.Uuid
    created_at           DateTime             @default(now()) @db.Timestamp(6)
    deleted_at           DateTime?            @db.Timestamp(6)
    updatedAt            DateTime?            @db.Timestamptz(6)
    assessment_result    assessment_result[]
    student_attendance   student_attendance[]
    academic_term        academic_term        @relation(fields: [academic_term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_term_sheet_academic_term_id_academic_term_id_fk")
    session_class        session_class        @relation(fields: [session_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_term_sheet_session_class_id_session_class_id_fk")
    student_session_form student_session_form @relation(fields: [session_sheet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_term_sheet_session_sheet_id_student_session_form_id_fk")
    student              student              @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_term_sheet_student_id_student_id_fk")
    transaction          transaction[]
}

// ---- .bin/classroom.prisma ----
model assessment_result {
    id                    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    assessment_id         String             @db.Uuid
    score                 Decimal?           @db.Decimal
    percentage            Decimal?           @db.Decimal
    student_term_sheet_id String             @db.Uuid
    created_at            DateTime           @default(now()) @db.Timestamp(6)
    deleted_at            DateTime?          @db.Timestamp(6)
    updatedAt             DateTime?          @db.Timestamptz(6)
    assessments           assessments        @relation(fields: [assessment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assessment_result_assessment_id_assessments_id_fk")
    student_term_sheet    student_term_sheet @relation(fields: [student_term_sheet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assessment_result_student_term_sheet_id_student_term_sheet_id_f")
}

model assessments {
    id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id         String              @db.Uuid
    class_subject_id  String              @db.Uuid
    description       String?             @db.VarChar
    obtainable        Decimal?            @db.Decimal
    teacher_id        String              @db.Uuid
    term_id           String              @db.Uuid
    created_at        DateTime            @default(now()) @db.Timestamp(6)
    deleted_at        DateTime?           @db.Timestamp(6)
    updatedAt         DateTime?           @db.Timestamptz(6)
    assessment_result assessment_result[]
    class_subject     class_subject       @relation(fields: [class_subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assessments_class_subject_id_class_subject_id_fk")
    school            school              @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assessments_school_id_school_id_fk")
    user              user                @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assessments_teacher_id_user_id_fk")
    academic_term     academic_term       @relation(fields: [term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assessments_term_id_academic_term_id_fk")
}

model class_subject {
    id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id              String                   @db.Uuid
    academic_session_id    String                   @db.Uuid
    academic_class_id      String                   @db.Uuid
    session_class_id       String                   @db.Uuid
    subject_id             String                   @db.Uuid
    created_at             DateTime                 @default(now()) @db.Timestamp(6)
    deleted_at             DateTime?                @db.Timestamp(6)
    updatedAt              DateTime?                @db.Timestamptz(6)
    assessments            assessments[]
    academic_class         academic_class           @relation(fields: [academic_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "class_subject_academic_class_id_academic_class_id_fk")
    academic_session       academic_session         @relation(fields: [academic_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "class_subject_academic_session_id_academic_session_id_fk")
    school                 school                   @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "class_subject_school_id_school_id_fk")
    session_class          session_class            @relation(fields: [session_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "class_subject_session_class_id_session_class_id_fk")
    Subjects               Subjects                 @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "class_subject_subject_id_Subjects_id_fk")
    student_day_attendance student_day_attendance[]

    @@unique([session_class_id, subject_id], map: "class_subject_session_class_id_subject_id_unique")
}

model Subjects {
    id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String          @db.VarChar(256)
    school_id     String          @db.Uuid
    created_at    DateTime        @default(now()) @db.Timestamp(6)
    deleted_at    DateTime?       @db.Timestamp(6)
    updatedAt     DateTime?       @db.Timestamptz(6)
    school        school          @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Subjects_school_id_school_id_fk")
    class_subject class_subject[]

    @@unique([name, school_id], map: "Subjects_name_school_id_unique")
}

// ---- .bin/example.post.prisma ----
model ExampleClassRoom {
    id             Int                           @unique @default(autoincrement())
    classCode      String                        @unique
    classTitle     String
    classGroupCode String
    students       ExampleStudents[]
    subjects       ExampleSubjectsOnClassRooms[]

    @@unique([classCode, classTitle, classGroupCode])
}

model ExampleSubject {
    id            Int                    @unique @default(autoincrement())
    title         String
    code          String                 @unique
    classSubjects ExampleClassSubjects[]

    @@unique([title])
}

// model ExampleSubjects {
//     id            Int                    @unique @default(autoincrement())
//     title         String
//     code          String                 @unique
//     classSubjects ExampleClassSubjects[]

//     @@unique([title])
// }

model ExampleClassSubjects {
    id             Int                           @unique @default(autoincrement())
    classGroupCode String
    subjectCode    String
    classRooms     ExampleSubjectsOnClassRooms[]
    subject        ExampleSubject?               @relation(fields: [subjectCode], references: [code])
    // assessmentResults ExampleStudentAssessment[]

    @@unique([classGroupCode, subjectCode])
}

model ExampleSubjectsOnClassRooms {
    id                        Int                               @unique @default(autoincrement())
    classRoomSubjectId        Int?
    classRoomId               Int?
    classRoom                 ExampleClassRoom?                 @relation(fields: [classRoomId], references: [id])
    classRoomSubject          ExampleClassSubjects?             @relation(fields: [classRoomSubjectId], references: [id])
    assessments               ExampleClassSubjectAssessment[]
    studentSubjectAssessments ExampleStudentSubjectAssessment[]
    studentAssessment         ExampleStudentAssessment[]

    @@unique([classRoomSubjectId, classRoomId])
}

model ExampleStudents {
    id                  Int                                @unique @default(autoincrement())
    studentCode         String
    firstName           String
    fathersName         String
    otherName           String?
    classCode           String
    studentString       String
    performanceRemarkId Int?
    exampleClassId      Int?
    classRoom           ExampleClassRoom?                  @relation(fields: [exampleClassId], references: [id])
    assessmentResults   ExampleStudentAssessment[]
    performanceRemark   ExampleRemarkOnStudentPerformance? @relation(fields: [performanceRemarkId], references: [id])
    payments            ExampleStudentPayments[]
    subjectAssessments  ExampleStudentSubjectAssessment[]

    @@unique([firstName, fathersName, otherName, classCode])
}

model ExampleClassSubjectAssessment {
    id                     Int                          @unique @default(autoincrement())
    title                  String
    obtainable             Float
    assessmentResults      ExampleStudentAssessment[]
    subjectsOnClassRoomsId Int?
    subjectsOnClassRoom    ExampleSubjectsOnClassRooms? @relation(fields: [subjectsOnClassRoomsId], references: [id])
}

model ExampleStudentSubjectAssessment {
    id                     Int                          @unique @default(autoincrement())
    subjectsOnClassRoomsId Int?
    studentId              Int?
    subjectsOnClassRoom    ExampleSubjectsOnClassRooms? @relation(fields: [subjectsOnClassRoomsId], references: [id])
    assessments            ExampleStudentAssessment[]
    obtained               Float?
    percentageScore        Float?
    student                ExampleStudents?             @relation(fields: [studentId], references: [id])

    @@unique([studentId, subjectsOnClassRoomsId])
}

model ExampleStudentAssessment {
    id                              Int                              @unique @default(autoincrement())
    obtained                        Float?
    percentageScore                 Float?
    classSubjectsId                 Int?
    studentId                       Int?
    classSubjectAssessmentId        Int?
    remarkOnAssementId              Int?
    studentSubjectAssessmentId      Int?
    classSubject                    ExampleSubjectsOnClassRooms?     @relation(fields: [classSubjectsId], references: [id])
    student                         ExampleStudents?                 @relation(fields: [studentId], references: [id])
    classSubjectAssessment          ExampleClassSubjectAssessment?   @relation(fields: [classSubjectAssessmentId], references: [id])
    RemarkOnAssessment              ExampleRemarkOnAssessment?       @relation(fields: [remarkOnAssementId], references: [id])
    ExampleStudentSubjectAssessment ExampleStudentSubjectAssessment? @relation(fields: [studentSubjectAssessmentId], references: [id])

    @@unique([studentId, studentSubjectAssessmentId, classSubjectAssessmentId])
}

model ExampleRemarkOnSubjectAssessment {
    id        Int  @unique @default(autoincrement())
    remarksId Int?

    remarks ExampleRemarks? @relation(fields: [remarksId], references: [id])
}

model ExampleRemarkOnAssessment {
    id          Int                        @unique @default(autoincrement())
    remarksId   Int?
    assessments ExampleStudentAssessment[]
    remarks     ExampleRemarks?            @relation(fields: [remarksId], references: [id])
}

model ExampleRemarkOnStudentPerformance {
    id         Int               @unique @default(autoincrement())
    percentage Float?
    remarksId  Int?
    remarks    ExampleRemarks?   @relation(fields: [remarksId], references: [id])
    student    ExampleStudents[]
}

model ExampleRemarks {
    id                        Int                                 @unique @default(autoincrement())
    remarkAr                  String?
    remarkEn                  String?
    assmentRemarks            ExampleRemarkOnAssessment[]
    studentPerformanceRemarks ExampleRemarkOnStudentPerformance[]
    subjectRemark             ExampleRemarkOnSubjectAssessment[]
}

model ExampleStudentPayments {
    id                Int              @unique @default(autoincrement())
    amount            Float?
    summary           String?
    ExampleStudents   ExampleStudents? @relation(fields: [exampleStudentsId], references: [id])
    exampleStudentsId Int?
}

// ---- .bin/cashier.prisma ----
model batch_staff_service {
    id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title            String?          @db.VarChar
    note             String?          @db.VarChar
    school_id        String           @db.Uuid
    total_amount     Decimal?         @default(0) @db.Decimal
    term_id          String           @db.Uuid
    session_id       String           @db.Uuid
    created_at       DateTime         @default(now()) @db.Timestamp(6)
    deleted_at       DateTime?        @db.Timestamp(6)
    updatedAt        DateTime?        @db.Timestamptz(6)
    school           school           @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "batch_staff_service_school_id_school_id_fk")
    academic_session academic_session @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "batch_staff_service_session_id_academic_session_id_fk")
    academic_term    academic_term    @relation(fields: [term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "batch_staff_service_term_id_academic_term_id_fk")
    staff_service    staff_service[]
}

model billable_service {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id          String               @db.Uuid
    title              String?              @db.VarChar
    amount             Decimal              @db.Decimal
    created_at         DateTime             @default(now()) @db.Timestamp(6)
    deleted_at         DateTime?            @db.Timestamp(6)
    updatedAt          DateTime?            @db.Timestamptz(6)
    school             school               @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "billable_service_school_id_school_id_fk")
    staff_service_cost staff_service_cost[]
}

model school_wallet {
    id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id  String    @db.Uuid
    balance    Decimal?  @default(0.00) @db.Decimal
    created_at DateTime  @default(now()) @db.Timestamp(6)
    deleted_at DateTime? @db.Timestamp(6)
    updatedAt  DateTime? @db.Timestamptz(6)
    school     school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "school_wallet_school_id_school_id_fk")
}

model transaction {
    id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id          String              @db.Uuid
    payment_type       String?             @db.VarChar
    transaction_type   String?             @db.VarChar
    headline           String?             @db.VarChar
    description        String?             @db.VarChar
    amount             Decimal             @db.Decimal
    coupon             Boolean?            @default(false)
    academic_term_id   String              @db.Uuid
    student_term_id    String?             @db.Uuid
    staff_term_id      String?             @db.Uuid
    created_at         DateTime            @default(now()) @db.Timestamp(6)
    deleted_at         DateTime?           @db.Timestamp(6)
    updatedAt          DateTime?           @db.Timestamptz(6)
    inventory_sales    inventory_sales[]
    staff_service      staff_service[]
    academic_term      academic_term       @relation(fields: [academic_term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_academic_term_id_academic_term_id_fk")
    school             school              @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_school_id_school_id_fk")
    staff_term_sheet   staff_term_sheet?   @relation(fields: [staff_term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_staff_term_id_staff_term_sheet_id_fk")
    student_term_sheet student_term_sheet? @relation(fields: [student_term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_student_term_id_student_term_sheet_id_fk")
}

// ---- .bin/staff.prisma ----
model staff_class_role {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    staff_id           String               @db.Uuid
    session_class_id   String               @db.Uuid
    role               String?              @db.VarChar
    created_at         DateTime             @default(now()) @db.Timestamp(6)
    deleted_at         DateTime?            @db.Timestamp(6)
    updatedAt          DateTime?            @db.Timestamptz(6)
    session_class      session_class        @relation(fields: [session_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_class_role_session_class_id_session_class_id_fk")
    user               user                 @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_class_role_staff_id_user_id_fk")
    staff_subject_role staff_subject_role[]
}

model staff_service {
    id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id           String               @db.Uuid
    note                String?              @db.VarChar
    amount              Decimal?             @default(0) @db.Decimal
    staff_id            String               @db.Uuid
    service_id          String               @db.Uuid
    term_id             String               @db.Uuid
    staff_tx_id         String?              @db.Uuid
    created_at          DateTime             @default(now()) @db.Timestamp(6)
    deleted_at          DateTime?            @db.Timestamp(6)
    updatedAt           DateTime?            @db.Timestamptz(6)
    batch_service_id    String               @db.Uuid
    batch_staff_service batch_staff_service  @relation(fields: [batch_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_service_batch_service_id_batch_staff_service_id_fk")
    user                user                 @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_service_staff_id_user_id_fk")
    transaction         transaction?         @relation(fields: [staff_tx_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_service_staff_tx_id_transaction_id_fk")
    staff_service_cost  staff_service_cost[]
}

model staff_service_cost {
    id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    note             String?          @db.VarChar
    title            String?          @db.VarChar
    amount           Decimal?         @default(0) @db.Decimal
    staff_service_id String           @db.Uuid
    service_id       String           @db.Uuid
    created_at       DateTime         @default(now()) @db.Timestamp(6)
    deleted_at       DateTime?        @db.Timestamp(6)
    updatedAt        DateTime?        @db.Timestamptz(6)
    billable_service billable_service @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_service_cost_service_id_billable_service_id_fk")
    staff_service    staff_service    @relation(fields: [staff_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_service_cost_staff_service_id_staff_service_id_fk")
}

model staff_session_form {
    id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id        String           @db.Uuid
    staff_id         String           @db.Uuid
    session_id       String           @db.Uuid
    created_at       DateTime         @default(now()) @db.Timestamp(6)
    deleted_at       DateTime?        @db.Timestamp(6)
    updatedAt        DateTime?        @db.Timestamptz(6)
    school           school           @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_session_form_school_id_school_id_fk")
    academic_session academic_session @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_session_form_session_id_academic_session_id_fk")
    user             user             @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_session_form_staff_id_user_id_fk")

    @@unique([school_id, staff_id, session_id], map: "staff_session_form_school_id_staff_id_session_id_unique")
}

model staff_subject_role {
    id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    staff_class_role_id String           @db.Uuid
    role                String?          @db.VarChar
    created_at          DateTime         @default(now()) @db.Timestamp(6)
    deleted_at          DateTime?        @db.Timestamp(6)
    updatedAt           DateTime?        @db.Timestamptz(6)
    staff_class_role    staff_class_role @relation(fields: [staff_class_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_subject_role_staff_class_role_id_staff_class_role_id_fk")
}

model staff_term_sheet {
    id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    school_id        String        @db.Uuid
    staff_id         String        @db.Uuid
    session_sheet_id String        @db.Uuid
    academic_term_id String        @db.Uuid
    created_at       DateTime      @default(now()) @db.Timestamp(6)
    deleted_at       DateTime?     @db.Timestamp(6)
    updatedAt        DateTime?     @db.Timestamptz(6)
    school           school        @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_term_sheet_school_id_school_id_fk")
    user             user          @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "staff_term_sheet_staff_id_user_id_fk")
    transaction      transaction[]
}

// ---- post.prisma ----
model Posts {
    id        Int       @unique @default(autoincrement())
    data      Json?
    name      String
    createdAt DateTime  @default(now()) @db.Timestamp(0)
    deletedAt DateTime?
}

// ---- student.prisma ----
model Students {
    id              String               @id @default(uuid())
    name            String
    surname         String?
    otherName       String?
    createdAt       DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt       DateTime?            @updatedAt
    deletedAt       DateTime?            @db.Timestamp(0)
    dob             DateTime?            @db.Timestamp(0)
    gender          Gender
    schoolProfile   SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String?
    sessionForms    StudentSessionForm[]
    termForms       StudentTermForm[]
    guardians       StudentGuardians[]
    fees            StudentFee[]

    @@unique([name, surname, otherName, schoolProfileId, deletedAt])
}

model StudentGuardians {
    id          String    @id @default(uuid())
    guardian    Guardians @relation(fields: [guardiansId], references: [id])
    guardiansId String
    relation    String?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    student   Students? @relation(fields: [studentId], references: [id])
    studentId String
}

enum Gender {
    Male
    Female
}

model StudentSessionForm {
    id                    String               @id @default(uuid())
    student               Students?            @relation(fields: [studentId], references: [id])
    studentId             String?
    createdAt             DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?            @updatedAt
    deletedAt             DateTime?            @db.Timestamp(0)
    schoolSession         SchoolSession?       @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId       String?
    schoolProfile         SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId       String?
    termForms             StudentTermForm[]
    classroomDepartment   ClassRoomDepartment? @relation(fields: [classroomDepartmentId], references: [id])
    classroomDepartmentId String?
}

model StudentTermForm {
    id              String              @id @default(uuid())
    schoolProfile   SchoolProfile?      @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String?
    createdAt       DateTime?           @default(now()) @db.Timestamp(0)
    updatedAt       DateTime?           @updatedAt
    deletedAt       DateTime?           @db.Timestamp(0)
    sessionTerm     SessionTerm?        @relation(fields: [sessionTermId], references: [id])
    sessionTermId   String?
    schoolSession   SchoolSession?      @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId String?
    attendanceList  StudentAttendance[]
    studentFees     StudentFee[]
    paymentReceipts StudentPayment[]

    studentSessionFormId String
    sessionForm          StudentSessionForm @relation(fields: [studentSessionFormId], references: [id])

    student   Students? @relation(fields: [studentId], references: [id])
    studentId String?

    classroomDepartment   ClassRoomDepartment? @relation(fields: [classroomDepartmentId], references: [id])
    classroomDepartmentId String?
}

// ---- classroom.prisma ----
model ClassRoom {
    id                   String                @id @default(uuid())
    name                 String?
    classLevel           Float?
    schoolProfileId      String
    schoolSessionId      String
    createdAt            DateTime?             @default(now()) @db.Timestamp(0)
    updatedAt            DateTime?             @updatedAt
    deletedAt            DateTime?             @db.Timestamp(0)
    session              SchoolSession         @relation(fields: [schoolSessionId], references: [id])
    school               SchoolProfile         @relation(fields: [schoolProfileId], references: [id])
    classRoomDepartments ClassRoomDepartment[]

    @@unique([schoolSessionId, name])
}

model ClassRoomDepartment {
    // if a class has multiple sub classes: eg: js 1 A, js 1 B etc.
    id                    String                                 @id @default(uuid())
    departmentName        String?
    classRoomsId          String?
    schoolProfileId       String?
    departmentLevel       Float?
    classRoom             ClassRoom?                             @relation(fields: [classRoomsId], references: [id])
    createdAt             DateTime?                              @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?                              @updatedAt
    deletedAt             DateTime?                              @db.Timestamp(0)
    schoolProfile         SchoolProfile?                         @relation(fields: [schoolProfileId], references: [id])
    attendance            ClassRoomAttendance[]
    studentAttendanceList StudentAttendance[]
    subjects              DepartmentSubject[]
    studentSessionForms   StudentSessionForm[]
    staffTermProfiles     StaffClassroomDepartmentTermProfiles[]
    StudentTermForm       StudentTermForm[]

    @@unique([classRoomsId, departmentName])
}

model DepartmentSubject {
    id String @id @default(uuid())

    classRoomDepartment   ClassRoomDepartment? @relation(fields: [classRoomDepartmentId], references: [id])
    classRoomDepartmentId String?

    staffSubjects StaffSubject[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    sessionTerm   SessionTerm? @relation(fields: [sessionTermId], references: [id])
    sessionTermId String?

    subject   Subject @relation(fields: [subjectId], references: [id])
    subjectId String
}

model Subject {
    id    String @id @default(uuid())
    title String

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    schoolProfile   SchoolProfile? @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String?

    departmentSubjects DepartmentSubject[]
}

// ---- school.prisma ----
model SchoolProfile {
    id                      String                @id @default(uuid())
    name                    String
    slug                    String
    subDomain               String                @unique
    createdAt               DateTime?             @default(now()) @db.Timestamp(0)
    accountId               String
    updatedAt               DateTime?             @updatedAt
    deletedAt               DateTime?             @db.Timestamp(0)
    sessions                SchoolSession[]
    terms                   SessionTerm[]
    classRooms              ClassRoom[]
    classRoomDepartments    ClassRoomDepartment[]
    classRoomAttendanceList ClassRoomAttendance[]
    students                Students[]
    sessionForms            StudentSessionForm[]
    termForms               StudentTermForm[]
    studentAttendanceList   StudentAttendance[]
    staffProfiles           StaffProfile[]

    subjects               Subject[]
    studentFees            StudentFee[]
    studentPaymentReceipts StudentPayment[]
    account                SaasAccount      @relation(fields: [accountId], references: [id])
    fees                   Fees[]
    wallets                Wallet[]
    guardians              Guardians[]
    billables              Billable[]
    bills                  Bills[]

    @@unique([name, subDomain, slug, deletedAt])
}

model SchoolSession {
    id    String @id @default(uuid())
    title String

    createdAt DateTime?     @default(now()) @db.Timestamp(0)
    updatedAt DateTime?     @updatedAt
    deletedAt DateTime?     @db.Timestamp(0)
    schoolId  String
    school    SchoolProfile @relation(fields: [schoolId], references: [id])

    terms             SessionTerm[]
    classRooms        ClassRoom[]
    sessionForms      StudentSessionForm[]
    termForms         StudentTermForm[]
    studentFees       StudentFee[]
    feeHistory        FeeHistory[]
    billableHistory   BillableHistory[]
    staffTermProfiles StaffTermProfile[]
    bills             Bills[]
}

model SessionTerm {
    id                 String              @id @default(uuid())
    sessionId          String
    schoolId           String
    title              String
    startDate          DateTime?           @db.Timestamp(0)
    endDate            DateTime?           @db.Timestamp(0)
    createdAt          DateTime?           @default(now()) @db.Timestamp(0)
    updatedAt          DateTime?           @updatedAt
    deletedAt          DateTime?           @db.Timestamp(0)
    school             SchoolProfile?      @relation(fields: [schoolId], references: [id])
    session            SchoolSession?      @relation(fields: [sessionId], references: [id])
    termForms          StudentTermForm[]
    departmentSubjects DepartmentSubject[]
    feeHistory         FeeHistory[]
    billableHistory    BillableHistory[]
    wallets            Wallet[]
    staffTermProfiles  StaffTermProfile[]
    bills              Bills[]
}

// ---- student-activity.prisma ----
model ClassRoomAttendance {
    id                    String               @id @default(uuid())
    attendanceTitle       String
    studentAttendanceList StudentAttendance[]
    SchoolProfile         SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId       String?
    createdAt             DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?            @updatedAt
    deletedAt             DateTime?            @db.Timestamp(0)
    department            ClassRoomDepartment? @relation(fields: [departmentId], references: [id])
    departmentId          String?
    staffProfile          StaffProfile?        @relation(fields: [staffProfileId], references: [id])
    staffProfileId        String?
}

model StudentAttendance {
    id                    String               @id @default(uuid())
    isPresent             Boolean?             @default(false)
    comment               String?
    StudentTermForm       StudentTermForm?     @relation(fields: [studentTermFormId], references: [id])
    schoolProfile         SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId       String?
    studentTermFormId     String?
    createdAt             DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt             DateTime?            @updatedAt
    deletedAt             DateTime?            @db.Timestamp(0)
    classroomAttendance   ClassRoomAttendance? @relation(fields: [classroomAttendanceId], references: [id])
    classroomAttendanceId String?
    department            ClassRoomDepartment? @relation(fields: [departmentId], references: [id])
    departmentId          String?
}

model Fees {
    id          String    @id @default(uuid())
    title       String
    description String?
    amount      Float?
    createdAt   DateTime? @default(now()) @db.Timestamp(0)
    updatedAt   DateTime? @updatedAt
    deletedAt   DateTime? @db.Timestamp(0)

    feeHistory      FeeHistory[]
    schoolProfileId String
    schoolProfile   SchoolProfile @relation(fields: [schoolProfileId], references: [id])
}

model FeeHistory {
    id              String        @id @default(uuid())
    amount          Float
    current         Boolean       @default(false)
    fee             Fees          @relation(fields: [feeId], references: [id])
    feeId           String
    schoolSession   SchoolSession @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId String
    term            SessionTerm   @relation(fields: [termId], references: [id])
    termId          String
    studentFees     StudentFee[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

model StudentFee {
    id String @id @default(uuid())

    createdAt         DateTime?        @default(now()) @db.Timestamp(0)
    updatedAt         DateTime?        @updatedAt
    deletedAt         DateTime?        @db.Timestamp(0)
    feeTitle          String?
    description       String?
    billAmount        Float
    pendingAmount     Float
    billablePriceId   String?
    schoolProfile     SchoolProfile?   @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId   String?
    studentTermForm   StudentTermForm? @relation(fields: [studentTermFormId], references: [id])
    studentTermFormId String?
    schoolSession     SchoolSession?   @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId   String?
    receipts          StudentPayment[]
    price             FeeHistory?      @relation(fields: [feeHistoryId], references: [id])
    feeHistoryId      String?

    student   Students? @relation(fields: [studentId], references: [id])
    studentId String?
}

model StudentPurchase {
    id          String           @id @default(uuid())
    description String
    title       String
    amount      Float
    paid        Float
    createdAt   DateTime?        @default(now()) @db.Timestamp(0)
    updatedAt   DateTime?        @updatedAt
    deletedAt   DateTime?        @db.Timestamp(0)
    payments    StudentPayment[]
}

model StudentPayment {
    id          String             @id @default(uuid())
    amount      Float?
    paymentType String
    description String?
    type        StudentPaymentType

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    studentFee            StudentFee? @relation(fields: [studentBillPaymentsId], references: [id])
    studentBillPaymentsId String?

    studentTermForm   StudentTermForm @relation(fields: [studentTermFormId], references: [id])
    studentTermFormId String

    schoolProfile   SchoolProfile @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String

    walletTransaction    WalletTransactions? @relation(fields: [walletTransactionsId], references: [id])
    walletTransactionsId String?             @unique

    studentPurchase   StudentPurchase? @relation(fields: [studentPurchaseId], references: [id])
    studentPurchaseId String?
}

enum StudentPaymentType {
    FEE
    PURCHASE
}

// ---- account.prisma ----
model SaasAccount {
    id      String  @id @default(uuid())
    name    String
    email   String
    phoneNo String?

    createdAt DateTime?       @default(now()) @db.Timestamp(0)
    updatedAt DateTime?       @updatedAt
    deletedAt DateTime?       @db.Timestamp(0)
    schools   SchoolProfile[]
    users     User[]
}

model User {
    id            String       @id @default(uuid())
    name          String
    email         String
    password      String
    phoneNo       String?
    role          String
    isVerified    Boolean?     @default(false)
    createdAt     DateTime?    @default(now()) @db.Timestamp(0)
    updatedAt     DateTime?    @updatedAt
    deletedAt     DateTime?    @db.Timestamp(0)
    // schools   SchoolProfile[]
    tenant        SaasAccount? @relation(fields: [saasAccountId], references: [id])
    saasAccountId String?
}

// ---- finance.prisma ----
model Wallet {
    id              String               @id @default(uuid())
    name            String
    schoolProfile   SchoolProfile?       @relation(fields: [schoolProfileId], references: [id])
    type            String?
    schoolProfileId String?
    sessionTerm     SessionTerm?         @relation(fields: [sessionTermId], references: [id])
    sessionTermId   String?
    transactions    WalletTransactions[]
    bills           Bills[]
    funds           Funds[]
    createdAt       DateTime?            @default(now()) @db.Timestamp(0)
    updatedAt       DateTime?            @updatedAt
    deletedAt       DateTime?            @db.Timestamp(0)

    @@unique([name, schoolProfileId, sessionTermId])
}

model WalletTransactions {
    id       String  @id @default(uuid())
    wallet   Wallet? @relation(fields: [walletId], references: [id])
    type     String?
    summary  String?
    amount   Float
    walletId String?

    studentPayment StudentPayment?
    billPayment    BillPayment?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    func   Funds?  @relation(fields: [fundId], references: [id])
    fundId String?
}

enum WalletType {
    Bill
    Fee
}

model Funds {
    id            String @id @default(uuid())
    title         String
    description   String
    amount        Float
    pendingAmount Float

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    transactions WalletTransactions[]

    wallet   Wallet @relation(fields: [walletId], references: [id])
    walletId String
}

model Billable {
    id          String    @id @default(uuid())
    title       String
    description String?
    type        BillType?
    amount      Float?
    createdAt   DateTime? @default(now()) @db.Timestamp(0)
    updatedAt   DateTime? @updatedAt
    deletedAt   DateTime? @db.Timestamp(0)

    bills           Bills[]
    schoolProfileId String
    schoolProfile   SchoolProfile     @relation(fields: [schoolProfileId], references: [id])
    billableHistory BillableHistory[]
}

model BillableHistory {
    id      String  @id @default(uuid())
    amount  Float
    current Boolean @default(false)

    billable Billable @relation(fields: [feeId], references: [id])
    feeId    String

    schoolSession   SchoolSession @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId String

    term   SessionTerm @relation(fields: [termId], references: [id])
    termId String

    bills Bills[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

model Bills {
    id          String  @id @default(uuid())
    title       String
    description String?

    amount Float?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    invoice   BillInvoice? @relation(fields: [invoiceId], references: [id])
    invoiceId String?

    staffTermProfile   StaffTermProfile? @relation(fields: [staffTermProfileId], references: [id])
    staffTermProfileId String?

    wallet   Wallet? @relation(fields: [walletId], references: [id])
    walletId String?

    billPayment   BillPayment? @relation(fields: [billPaymentId], references: [id])
    billPaymentId String?

    billable   Billable? @relation(fields: [billableId], references: [id])
    billableId String?

    billableHistory   BillableHistory? @relation(fields: [billableHistoryId], references: [id])
    billableHistoryId String?

    sessionTerm   SessionTerm @relation(fields: [sessionTermId], references: [id])
    sessionTermId String

    schoolSession   SchoolSession @relation(fields: [schoolSessionId], references: [id])
    schoolSessionId String

    schoolProfile   SchoolProfile @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String
}

enum BillType {
    SALARY
    MISC
    OTHER
}

model BillInvoice {
    id     String  @id @default(uuid())
    amount Float?
    bills  Bills[]

    payment BillPayment?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

model BillPayment {
    id     String @id @default(uuid())
    amount Float

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    transactionId String             @unique
    transaction   WalletTransactions @relation(fields: [transactionId], references: [id])

    invoiceId String      @unique
    invoice   BillInvoice @relation(fields: [invoiceId], references: [id])

    bills Bills[]
}

// ---- staffs.prisma ----
model StaffProfile {
    id       String  @id @default(uuid())
    name     String
    title    String?
    email    String?
    password String?
    phone    String?
    phone2   String?
    address  String?

    classRoomAttendanceList ClassRoomAttendance[]
    schoolProfile           SchoolProfile?        @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId         String?
    subjects                StaffSubject[]
    termProfiles            StaffTermProfile[]
    createdAt               DateTime?             @default(now()) @db.Timestamp(0)
    updatedAt               DateTime?             @updatedAt
    deletedAt               DateTime?             @db.Timestamp(0)
}

model StaffTermProfile {
    id String @id @default(uuid())

    bills Bills[]

    staffProfileId String
    staffProfile   StaffProfile @relation(fields: [staffProfileId], references: [id])

    schoolSessionId String
    schoolSession   SchoolSession @relation(fields: [schoolSessionId], references: [id])

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    classroomsProfiles StaffClassroomDepartmentTermProfiles[]

    sessionTerm   SessionTerm @relation(fields: [sessionTermId], references: [id])
    sessionTermId String
}

model StaffClassroomDepartmentTermProfiles {
    id String @id @default(uuid())

    classRoomDepartment   ClassRoomDepartment? @relation(fields: [classRoomDepartmentId], references: [id])
    classRoomDepartmentId String?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    staffTermProfile   StaffTermProfile @relation(fields: [staffTermProfileId], references: [id])
    staffTermProfileId String
}

model StaffSubject {
    id String @id @default(uuid())

    staffProfilesId String
    staffProfile    StaffProfile @relation(fields: [staffProfilesId], references: [id])

    departmentSubject   DepartmentSubject? @relation(fields: [departmentSubjectId], references: [id])
    departmentSubjectId String?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

// ---- guardian.prisma ----
model Guardians {
    id String @id @default(uuid())

    name   String
    phone  String
    phone2 String?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    schoolProfile   SchoolProfile @relation(fields: [schoolProfileId], references: [id])
    schoolProfileId String

    wards StudentGuardians[]

    @@unique([name, phone, schoolProfileId])
}

