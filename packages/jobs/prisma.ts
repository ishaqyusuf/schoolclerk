import { readdir, stat, readFile, writeFile } from "fs/promises";
import { join, relative, resolve } from "path";

const sourceDir = resolve("../db/src/schema");
const outputFile = resolve("./src/schema.prisma");

const collectPrismaFiles = async (dir: string): Promise<string[]> => {
  const entries = await readdir(dir);
  const files: string[] = [];

  for (const entry of entries) {
    const fullPath = join(dir, entry);
    const entryStat = await stat(fullPath);

    if (entryStat.isDirectory()) {
      const nested = await collectPrismaFiles(fullPath);
      files.push(...nested);
    } else if (entry.endsWith(".prisma")) {
      files.push(fullPath);
    }
  }

  return files;
};

(async () => {
  const allFiles = await collectPrismaFiles(sourceDir);

  const schemaFile = allFiles.find(
    (f) => f.endsWith("/schema.prisma") || f.endsWith("\\schema.prisma")
  );
  const otherFiles = allFiles.filter((f) => f !== schemaFile);

  let combined = "// Auto-generated by flatten-schema.ts\n\n";

  if (schemaFile) {
    const schemaContent = await readFile(schemaFile, "utf8");
    combined += `// ---- schema.prisma (entrypoint) ----\n${schemaContent.trim()}\n\n`;
  }

  for (const file of otherFiles) {
    const relPath = relative(sourceDir, file);
    const content = await readFile(file, "utf8");
    combined += `// ---- ${relPath} ----\n${content.trim()}\n\n`;
  }

  await writeFile(outputFile, combined);
  console.log(`âœ… Flattened schema written to ${outputFile}`);
})();
